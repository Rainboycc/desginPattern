package com.clay.state_pattern;

/**
 * 状态模式（State Pattern）：对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。
 * 角色：环境类（ThreadContext）、抽象状态（ThreadState）、具体状态（New、Runnable、Running、Blocked、Dead）
 * 优点：
 *      1、结构清晰，状态模式将与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足“单一职责原则”。
 *      2、将状态转换显示化，减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态转换变得更加明确，且减少对象间的相互依赖。
 *      3、状态类职责明确，有利于程序的扩展。通过定义新的子类很容易地增加新的状态和转换。
 * 缺点：
 *      1、状态模式的使用必然会增加系统的类与对象的个数。
 *      2、状态模式的结构与实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。
 *      3、状态模式对开闭原则的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源码，否则无法切换到新增状态，而且修改某个状态类的行为也需要修改对应类的源码。
 * 适用场景：
 *      1、当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。
 *      2、一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。
 * 扩展：
 *      在有些情况下，可能有多个环境对象需要共享一组状态，这时需要引入享元模式，将这些具体状态对象放在集合中供程序共享
 * 拓展：
 *    状态模式与责任链模式的区别：
 *      1、状态模式和责任链模式都能消除 if-else 分支过多的问题。但在某些情况下，状态模式中的状态可以理解为责任，那么在这种情况下，两种模式都可以使用。
 *      2、从定义来看，状态模式强调的是一个对象内在状态的改变，而责任链模式强调的是外部节点对象间的改变。
 *      3、从代码实现上来看，两者最大的区别就是状态模式的各个状态对象知道自己要进入的下一个状态对象，而责任链模式并不清楚其下一个节点处理对象，因为链式组装由客户端负责。
 *    状态模式与策略模式的区别：
 *      状态模式和策略模式的 UML 类图架构几乎完全一样，但两者的应用场景是不一样的。
 *      策略模式的多种算法行为择其一都能满足，彼此之间是独立的，用户可自行更换策略算法，而状态模式的各个状态间存在相互关系，彼此之间在一定条件下存在自动切换状态的效果，并且用户无法指定状态，只能设置初始状态。
 */
public class Client {
    public static void main(String[] args) {
        ThreadContext context = new ThreadContext();
        context.start();
        context.getCPU();
        context.suspend();
        context.resume();
        context.getCPU();
        context.stop();
    }
}
