package com.clay.visitor_pattern;


/**
 * 访问者模式（Visitor）：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。
 * 角色：抽象访问者（Visitor）、具体访问者（ConcreteVisitor）、抽象元素（Element）、具体元素（ConcreteElement）、对象结构（Object Structure）
 * 优点：
 *      1、扩展性好。能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。
 *      2、复用性好。可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度。
 *      3、灵活性好。访问者模式将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构。
 *      4、符合单一职责原则。访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一。
 * 缺点：
 *      1、增加新的元素类很困难。在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。
 *      2、破坏封装。访问者模式中具体元素对访问者公布细节，这破坏了对象的封装性。
 *      3、违反了依赖倒置原则。访问者模式依赖了具体类，而没有依赖抽象类。
 * 适用场景：
 *      1、当对集合中的不同类型数据（类型数量稳定）进行多种操作时，使用访问者模式。
 *      2、对象结构相对稳定，但其操作算法经常变化的程序。
 *      3、对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。
 *      4、对象结构包含很多类型的对象，希望对这些对象实施一些依赖于其具体类型的操作
 * 扩展：
 *      1、与“迭代器模式”联用。因为访问者模式中的“对象结构”是一个包含元素角色的容器，当访问者遍历容器中的所有元素时，常常要用迭代器。
 *      2、访问者（Visitor）模式同“组合模式”联用。因为访问者（Visitor）模式中的“元素对象”可能是叶子对象或者是容器对象，如果元素对象包含容器对象，就必须用到组合模式。
 */
public class Client {
    public static void main(String[] args) {
        ObjectStructure os = new ObjectStructure();
        os.add(new ConcreteElementA());
        os.add(new ConcreteElementB());
        Visitor visitor = new ConcreteVisitorA();
        os.accept(visitor);
        System.out.println("------------------------");
        visitor = new ConcreteVisitorB();
        os.accept(visitor);
    }

}
